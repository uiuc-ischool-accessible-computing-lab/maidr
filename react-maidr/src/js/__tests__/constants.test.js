// Generated by CodiumAI

describe('Constants', () => {
  // Constants instance should have default values for all properties
  it('should have default values for all properties', () => {
    const constants = new Constants();
    expect(constants.chart_container_id).toBe('chart-container');
    expect(constants.main_container_id).toBe('maidr-container');
    expect(constants.braille_container_id).toBe('braille-div');
    expect(constants.braille_input_id).toBe('braille-input');
    expect(constants.info_id).toBe('info');
    expect(constants.announcement_container_id).toBe('announcements');
    expect(constants.end_chime_id).toBe('end_chime');
    expect(constants.container_id).toBe('container');
    expect(constants.project_id).toBe('maidr');
    expect(constants.review_id_container).toBe('review_container');
    expect(constants.review_id).toBe('review');
    expect(constants.reviewSaveSpot).toBeUndefined();
    expect(constants.reviewSaveBrailleMode).toBeUndefined();
    expect(constants.chartId).toBe('');
    expect(constants.events).toEqual([]);
    expect(constants.postLoadEvents).toEqual([]);
    expect(constants.textMode).toBe('verbose');
    expect(constants.brailleMode).toBe('off');
    expect(constants.sonifMode).toBe('on');
    expect(constants.reviewMode).toBe('off');
    expect(constants.minX).toBe(0);
    expect(constants.maxX).toBe(0);
    expect(constants.minY).toBe(0);
    expect(constants.maxY).toBe(0);
    expect(constants.plotId).toBe('');
    expect(constants.chartType).toBe('');
    expect(constants.navigation).toBe(1);
    expect(constants.MAX_FREQUENCY).toBe(1000);
    expect(constants.MIN_FREQUENCY).toBe(200);
    expect(constants.NULL_FREQUENCY).toBe(100);
    expect(constants.MAX_SPEED).toBe(500);
    expect(constants.MIN_SPEED).toBe(50);
    expect(constants.DEFAULT_SPEED).toBe(250);
    expect(constants.INTERVAL).toBe(20);
    expect(constants.AUTOPLAY_DURATION).toBe(5000);
    expect(constants.vol).toBe(0.5);
    expect(constants.MAX_VOL).toBe(30);
    expect(constants.autoPlayRate).toBe(250);
    expect(constants.colorSelected).toBe('#03C809');
    expect(constants.brailleDisplayLength).toBe(32);
    expect(constants.showRect).toBe(1);
    expect(constants.hasRect).toBe(1);
    expect(constants.hasSmooth).toBe(1);
    expect(constants.duration).toBe(0.3);
    expect(constants.outlierDuration).toBe(0.06);
    expect(constants.autoPlayOutlierRate).toBe(50);
    expect(constants.autoPlayPointsRate).toBe(30);
    expect(constants.colorUnselected).toBe('#595959');
    expect(constants.isTracking).toBe(1);
    expect(constants.visualBraille).toBe(false);
    expect(constants.globalMinMax).toBe(true);
    expect(constants.showDisplay).toBe(1);
    expect(constants.showDisplayInBraille).toBe(1);
    expect(constants.showDisplayInAutoplay).toBe(0);
    expect(constants.outlierInterval).toBeNull();
    expect(constants.isMac).toBe(false);
    expect(constants.control).toBe('Ctrl');
    expect(constants.alt).toBe('Alt');
    expect(constants.home).toBe('Home');
    expect(constants.end).toBe('End');
    expect(constants.keypressInterval).toBe(2000);
    expect(constants.tabMovement).toBeNull();
    expect(constants.debugLevel).toBe(3);
    expect(constants.canPlayEndChime).toBe(false);
    expect(constants.manualData).toBe(true);
  });

  // Constants instance should be able to modify its properties
  it('should be able to modify its properties', () => {
    const constants = new Constants();
    constants.chart_container_id = 'new-chart-container';
    constants.main_container_id = 'new-maidr-container';
    constants.braille_container_id = 'new-braille-div';
    constants.braille_input_id = 'new-braille-input';
    constants.info_id = 'new-info';
    constants.announcement_container_id = 'new-announcements';
    constants.end_chime_id = 'new-end_chime';
    constants.container_id = 'new-container';
    constants.project_id = 'new-maidr';
    constants.review_id_container = 'new-review_container';
    constants.review_id = 'new-review';
    constants.reviewSaveSpot = 'new-reviewSaveSpot';
    constants.reviewSaveBrailleMode = 'new-reviewSaveBrailleMode';
    constants.chartId = 'new-chartId';
    constants.events = ['event1', 'event2'];
    constants.postLoadEvents = ['postLoadEvent1', 'postLoadEvent2'];
    constants.textMode = 'new-verbose';
    constants.brailleMode = 'new-off';
    constants.sonifMode = 'new-on';
    constants.reviewMode = 'new-off';
    constants.minX = 10;
    constants.maxX = 20;
    constants.minY = 30;
    constants.maxY = 40;
    constants.plotId = 'new-plotId';
    constants.chartType = 'new-chartType';
    constants.navigation = 0;
    constants.MAX_FREQUENCY = 2000;
    constants.MIN_FREQUENCY = 400;
    constants.NULL_FREQUENCY = 200;
    constants.MAX_SPEED = 1000;
    constants.MIN_SPEED = 100;
    constants.DEFAULT_SPEED = 500;
    constants.INTERVAL = 40;
    constants.AUTOPLAY_DURATION = 10000;
    constants.vol = 0.8;
    constants.MAX_VOL = 40;
    constants.autoPlayRate = 500;
    constants.colorSelected = '#C80309';
    constants.brailleDisplayLength = 64;
    constants.showRect = 0;
    constants.hasRect = 0;
    constants.hasSmooth = 0;
    constants.duration = 0.6;
    constants.outlierDuration = 0.12;
    constants.autoPlayOutlierRate = 100;
    constants.autoPlayPointsRate = 60;
    constants.colorUnselected = '#959595';
    constants.isTracking = 0;
    constants.visualBraille = true;
    constants.globalMinMax = false;
    constants.showDisplay = 0;
    constants.showDisplayInBraille = 0;
    constants.showDisplayInAutoplay = 1;
    constants.outlierInterval = 'new-outlierInterval';
    constants.isMac = true;
    constants.control = 'Cmd';
    constants.alt = 'option';
    constants.home = 'fn + Left arrow';
    constants.end = 'fn + Right arrow';
    constants.keypressInterval = 4000;
    constants.tabMovement = 'new-tabMovement';
    constants.debugLevel = 2;
    constants.canPlayEndChime = true;
    constants.manualData = false;

    expect(constants.chart_container_id).toBe('new-chart-container');
    expect(constants.main_container_id).toBe('new-maidr-container');
    expect(constants.braille_container_id).toBe('new-braille-div');
    expect(constants.braille_input_id).toBe('new-braille-input');
    expect(constants.info_id).toBe('new-info');
    expect(constants.announcement_container_id).toBe('new-announcements');
    expect(constants.end_chime_id).toBe('new-end_chime');
    expect(constants.container_id).toBe('new-container');
    expect(constants.project_id).toBe('new-maidr');
    expect(constants.review_id_container).toBe('new-review_container');
    expect(constants.review_id).toBe('new-review');
    expect(constants.reviewSaveSpot).toBe('new-reviewSaveSpot');
    expect(constants.reviewSaveBrailleMode).toBe('new-reviewSaveBrailleMode');
    expect(constants.chartId).toBe('new-chartId');
    expect(constants.events).toEqual(['event1', 'event2']);
    expect(constants.postLoadEvents).toEqual([
      'postLoadEvent1',
      'postLoadEvent2',
    ]);
    expect(constants.textMode).toBe('new-verbose');
    expect(constants.brailleMode).toBe('new-off');
    expect(constants.sonifMode).toBe('new-on');
    expect(constants.reviewMode).toBe('new-off');
    expect(constants.minX).toBe(10);
    expect(constants.maxX).toBe(20);
    expect(constants.minY).toBe(30);
    expect(constants.maxY).toBe(40);
    expect(constants.plotId).toBe('new-plotId');
    expect(constants.chartType).toBe('new-chartType');
    expect(constants.navigation).toBe(0);
    expect(constants.MAX_FREQUENCY).toBe(2000);
    expect(constants.MIN_FREQUENCY).toBe(400);
    expect(constants.NULL_FREQUENCY).toBe(200);
    expect(constants.MAX_SPEED).toBe(1000);
    expect(constants.MIN_SPEED).toBe(100);
    expect(constants.DEFAULT_SPEED).toBe(500);
    expect(constants.INTERVAL).toBe(40);
    expect(constants.AUTOPLAY_DURATION).toBe(10000);
    expect(constants.vol).toBe(0.8);
    expect(constants.MAX_VOL).toBe(40);
    expect(constants.autoPlayRate).toBe(500);
    expect(constants.colorSelected).toBe('#C80309');
    expect(constants.brailleDisplayLength).toBe(64);
    expect(constants.showRect).toBe(0);
    expect(constants.hasRect).toBe(0);
    expect(constants.hasSmooth).toBe(0);
    expect(constants.duration).toBe(0.6);
    expect(constants.outlierDuration).toBe(0.12);
    expect(constants.autoPlayOutlierRate).toBe(100);
    expect(constants.autoPlayPointsRate).toBe(60);
    expect(constants.colorUnselected).toBe('#959595');
    expect(constants.isTracking).toBe(0);
    expect(constants.visualBraille).toBe(true);
    expect(constants.globalMinMax).toBe(false);
    expect(constants.showDisplay).toBe(0);
    expect(constants.showDisplayInBraille).toBe(0);
    expect(constants.showDisplayInAutoplay).toBe(1);
    expect(constants.outlierInterval).toBe('new-outlierInterval');
    expect(constants.isMac).toBe(true);
    expect(constants.control).toBe('Cmd');
    expect(constants.alt).toBe('option');
    expect(constants.home).toBe('fn + Left arrow');
    expect(constants.end).toBe('fn + Right arrow');
    expect(constants.keypressInterval).toBe(4000);
    expect(constants.tabMovement).toBe('new-tabMovement');
    expect(constants.debugLevel).toBe(2);
    expect(constants.canPlayEndChime).toBe(true);
    expect(constants.manualData).toBe(false);
  });
});
// Generated by CodiumAI

describe('Resources', () => {
  // Resources object can be instantiated successfully
  it('should instantiate Resources object successfully', () => {
    const resources = new Resources();
    expect(resources).toBeInstanceOf(Resources);
  });

  // GetString method returns the correct string for a given id
  it('should return the correct string for a given id', () => {
    const resources = new Resources();
    const string = resources.GetString('upper_outlier');
    expect(string).toBe('Upper Outlier');
  });

  // Language and knowledgeLevel properties can be set and retrieved successfully
  it('should set and retrieve Language and knowledgeLevel properties successfully', () => {
    const resources = new Resources();
    resources.language = 'fr';
    resources.knowledgeLevel = 'intermediate';
    expect(resources.language).toBe('fr');
    expect(resources.knowledgeLevel).toBe('intermediate');
  });

  // GetString method throws an error if id is not found in strings object
  it('should throw an error if id is not found in strings object', () => {
    const resources = new Resources();
    expect(() => {
      resources.GetString('invalid_id');
    }).toThrow();
  });

  // Language property throws an error if set to an invalid value
  it('should throw an error if Language property is set to an invalid value', () => {
    const resources = new Resources();
    expect(() => {
      resources.language = 'invalid_language';
    }).toThrow();
  });

  // KnowledgeLevel property throws an error if set to an invalid value
  it('should throw an error if KnowledgeLevel property is set to an invalid value', () => {
    const resources = new Resources();
    expect(() => {
      resources.knowledgeLevel = 'invalid_level';
    }).toThrow();
  });
});
// Generated by CodiumAI

describe('Menu', () => {
  // Menu is created successfully
  it('should create menu successfully', () => {
    const menu = new Menu();
    expect(menu).toBeDefined();
  });

  // Menu is destroyed successfully
  it('should destroy menu successfully', () => {
    const menu = new Menu();
    menu.Destroy();
    expect(document.getElementById('menu')).toBeNull();
    expect(document.getElementById('menu_modal_backdrop')).toBeNull();
  });

  // Menu is toggled on successfully
  it('should toggle menu on successfully', () => {
    const menu = new Menu();
    menu.Toggle(true);
    expect(document.getElementById('menu').classList.contains('hidden')).toBe(
      false
    );
    expect(
      document
        .getElementById('menu_modal_backdrop')
        .classList.contains('hidden')
    ).toBe(false);
  });
});

// Generated by CodiumAI

describe('Description', () => {
  // CreateComponent method creates a modal with description summary
  it('should create a modal with description summary when called', () => {
    const description = new Description();
    description.CreateComponent();
    const modal = document.getElementById('description');
    expect(modal).not.toBeNull();
  });

  // Toggle method opens and closes the modal
  it('should open and close the modal when called with onoff parameter', () => {
    const description = new Description();
    description.CreateComponent();
    description.Toggle(true);
    const modal = document.getElementById('description');
    expect(modal.classList.contains('hidden')).toBe(false);
    description.Toggle(false);
    expect(modal.classList.contains('hidden')).toBe(true);
  });

  // PopulateData method populates the modal with chart info and data
  it('should populate the modal with chart info and data when called', () => {
    const description = new Description();
    description.CreateComponent();
    description.PopulateData();
    const content = document.getElementById('desc_content');
    const table = document.getElementById('desc_table');
    expect(content.innerHTML).not.toBe('');
    expect(table.innerHTML).not.toBe('');
  });

  // CreateComponent method does not create a modal if called in development mode
  it('should not create a modal if called in development mode', () => {
    const description = new Description();
    description.CreateComponent();
    const modal = document.getElementById('description');
    expect(modal).toBeNull();
  });

  // Destroy method removes the modal and backdrop elements
  it('should remove the modal and backdrop elements when called', () => {
    const description = new Description();
    description.CreateComponent();
    description.Destroy();
    const modal = document.getElementById('description');
    const backdrop = document.getElementById('desc_modal_backdrop');
    expect(modal).toBeNull();
    expect(backdrop).toBeNull();
  });

  // Toggle method handles case when onoff parameter is undefined
  it('should handle case when onoff parameter is undefined', () => {
    const description = new Description();
    description.CreateComponent();
    description.Toggle();
    const modal = document.getElementById('description');
    expect(modal.classList.contains('hidden')).toBe(false);
    description.Toggle();
    expect(modal.classList.contains('hidden')).toBe(true);
  });
});

// Generated by CodiumAI

describe('Position', () => {
  // Creating a new Position object with valid x and y values should set the x and y attributes accordingly.
  it('should set x and y attributes when creating a new Position object with valid x and y values', () => {
    const position = new Position(1, 2);
    expect(position.x).toBe(1);
    expect(position.y).toBe(2);
  });

  // Creating a new Position object with valid x and y values and an optional z value should set the x, y, and z attributes accordingly.
  it('should set x, y, and z attributes when creating a new Position object with valid x, y, and z values', () => {
    const position = new Position(1, 2, 3);
    expect(position.x).toBe(1);
    expect(position.y).toBe(2);
    expect(position.z).toBe(3);
  });

  // The x, y, and z attributes of a Position object should be retrievable and modifiable using dot notation.
  it('should be able to retrieve and modify x, y, and z attributes using dot notation', () => {
    const position = new Position(1, 2, 3);
    position.x = 4;
    position.y = 5;
    position.z = 6;
    expect(position.x).toBe(4);
    expect(position.y).toBe(5);
    expect(position.z).toBe(6);
  });

  // Creating a new Position object with a non-numeric x value should raise a TypeError.
  it('should raise a TypeError when creating a new Position object with a non-numeric x value', () => {
    expect(() => new Position('a', 2)).toThrow(TypeError);
  });
});

// Generated by CodiumAI

describe('Helper', () => {
  // containsObject returns true when object is in array
  it('should return true when object is in array', () => {
    const obj = { name: 'John' };
    const arr = [obj, { name: 'Jane' }, { name: 'Bob' }];

    expect(Helper.containsObject(obj, arr)).toBe(true);
  });

  // containsObject returns false when object is not in array
  it('should return false when object is not in array', () => {
    const obj = { name: 'John' };
    const arr = [{ name: 'Jane' }, { name: 'Bob' }];

    expect(Helper.containsObject(obj, arr)).toBe(false);
  });

  // containsObject returns false when array is empty
  it('should return false when array is empty', () => {
    const obj = { name: 'John' };
    const arr = [];

    expect(Helper.containsObject(obj, arr)).toBe(false);
  });

  // containsObject returns false when object is null
  it('should return false when object is null', () => {
    const obj = null;
    const arr = [{ name: 'Jane' }, { name: 'Bob' }];

    expect(Helper.containsObject(obj, arr)).toBe(false);
  });

  // containsObject returns false when array is null
  it('should return false when array is null', () => {
    const obj = { name: 'John' };
    const arr = null;

    expect(Helper.containsObject(obj, arr)).toBe(false);
  });

  // containsObject returns true when object is equal to an object in array
  it('should return true when object is equal to an object in array', () => {
    const obj = { name: 'John' };
    const arr = [{ name: 'Jane' }, obj, { name: 'Bob' }];

    expect(Helper.containsObject(obj, arr)).toBe(true);
  });
});

// Generated by CodiumAI

describe('Tracker', () => {
  // Tracker is initialized with default data if no previous data is found
  it('should initialize Tracker with default data when no previous data is found', () => {
    const tracker = new Tracker();
    const data = tracker.GetTrackerData();

    expect(data).toBeDefined();
    expect(data.userAgent).toBeDefined();
    expect(data.vendor).toBeDefined();
    expect(data.language).toBeDefined();
    expect(data.platform).toBeDefined();
    expect(data.events).toBeDefined();
  });

  // Tracker can save data to local storage
  it('should save data to local storage', () => {
    const tracker = new Tracker();
    const data = {
      userAgent: 'test',
      vendor: 'test',
      language: 'test',
      platform: 'test',
      events: [],
    };

    tracker.SaveTrackerData(data);
    const savedData = JSON.parse(localStorage.getItem(constants.project_id));

    expect(savedData).toEqual(data);
  });

  // Tracker can retrieve data from local storage
  it('should retrieve data from local storage', () => {
    const tracker = new Tracker();
    const data = {
      userAgent: 'test',
      vendor: 'test',
      language: 'test',
      platform: 'test',
      events: [],
    };

    localStorage.setItem(constants.project_id, JSON.stringify(data));
    const retrievedData = tracker.GetTrackerData();

    expect(retrievedData).toEqual(data);
  });

  // Tracker can handle cases where previous data is found in local storage
  it('should handle cases where previous data is found in local storage', () => {
    const tracker = new Tracker();
    const prevData = {
      userAgent: 'test',
      vendor: 'test',
      language: 'test',
      platform: 'test',
      events: [],
    };
    const newData = {
      userAgent: 'new',
      vendor: 'new',
      language: 'new',
      platform: 'new',
      events: [],
    };

    localStorage.setItem(constants.project_id, JSON.stringify(prevData));
    tracker.DataSetup();
    const retrievedData = tracker.GetTrackerData();

    expect(retrievedData).toEqual(prevData);

    tracker.SaveTrackerData(newData);
    const savedData = JSON.parse(localStorage.getItem(constants.project_id));

    expect(savedData).toEqual(newData);
  });
});

// Generated by CodiumAI

describe('Review', () => {
  // Toggling review mode on sets focus to review element and announces "Review on"
  it('should set focus to review element and announce "Review on" when toggling review mode on', () => {
    const review = new Review();
    document.activeElement = null;
    display.announceText = jest.fn();

    review.ToggleReviewMode(true);

    expect(document.activeElement).toBe(constants.review);
    expect(display.announceText).toHaveBeenCalledWith('Review on');
  });

  // Toggling review mode off hides review container and announces "Review off"
  it('should hide review container and announce "Review off" when toggling review mode off', () => {
    const review = new Review();
    constants.review_container.classList.remove = jest.fn();
    display.announceText = jest.fn();

    review.ToggleReviewMode(false);

    expect(constants.review_container.classList.add).toHaveBeenCalledWith(
      'hidden'
    );
    expect(display.announceText).toHaveBeenCalledWith('Review off');
  });

  // Toggling review mode off with braille mode on turns braille mode back on
  it('should turn braille mode back on when toggling review mode off with braille mode on', () => {
    const review = new Review();
    constants.brailleMode = 'on';
    constants.reviewSaveBrailleMode = 'on';
    display.toggleBrailleMode = jest.fn();

    review.ToggleReviewMode(false);

    expect(display.toggleBrailleMode).toHaveBeenCalledWith('on');
  });

  // Toggling review mode on with no active element sets saved spot to null
  it('should set saved spot to null when toggling review mode on with no active element', () => {
    const review = new Review();
    document.activeElement = null;

    review.ToggleReviewMode(true);

    expect(constants.reviewSaveSpot).toBeNull();
  });
});

// Generated by CodiumAI

describe('LogError', () => {
  // LogAbsentElement method logs a message with the absent element and a default message.
  it('should log a message with the absent element and a default message', () => {
    const logError = new LogError();
    const consoleSpy = jest.spyOn(console, 'log');

    logError.LogAbsentElement('element');

    expect(consoleSpy).toHaveBeenCalledWith(
      'element not found. Visual highlighting is turned off.'
    );

    consoleSpy.mockRestore();
  });

  // LogCriticalElement method logs a message with the critical element and a specific message.
  it('should log a message with the critical element and a specific message', () => {
    const logError = new LogError();
    const consoleSpy = jest.spyOn(console, 'log');

    logError.LogCriticalElement('element');

    expect(consoleSpy).toHaveBeenCalledWith(
      'element is critical. MAIDR unable to run'
    );

    consoleSpy.mockRestore();
  });

  // LogDifferentLengths method logs a message with two elements that do not have the same length and a default message.
  it('should log a message with two elements that do not have the same length and a default message', () => {
    const logError = new LogError();
    const consoleSpy = jest.spyOn(console, 'log');

    logError.LogDifferentLengths('element1', 'element2');

    expect(consoleSpy).toHaveBeenCalledWith(
      'element1 and element2 do not have the same length. Visual highlighting is turned off.'
    );

    consoleSpy.mockRestore();
  });
});
